version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
    ports:
      - ${ZOOKEEPER_CLIENT_PORT}:${ZOOKEEPER_CLIENT_PORT}
  
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - ${KAFKA_PORT}:${KAFKA_PORT}
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_CLIENT_PORT}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_INTER_BROKER_LISTENER_NAME: ${KAFKA_INTER_BROKER_LISTENER_NAME}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
      
  
  init-kafka:
    image: confluentinc/cp-kafka:latest
    container_name: init-kafka
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server localhost:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server localhost:29092 --create --if-not-exists --topic ${KAFKA_TOPIC_TRANSACTION_CREATED} --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server localhost:29092 --create --if-not-exists --topic ${KAFKA_TOPIC_TRANSACTION_VERIFIED} --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server localhost:29092 --list
      "

  mysql-db:
    platform: linux/x86_64
    container_name:  mysql-db
    image: mysql:5.7
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - ${MYSQL_PORT}:${MYSQL_PORT}
    volumes:
      - ./mysql-db:/docker-entrypoint-initdb.d/
    networks:
      - default 

  microservice-transaction:
      container_name: microservice-transaction
      depends_on:
        - mysql-db
      build: ./microservice-transaction
      restart: unless-stopped
      ports:
        - ${MICROSERVICE_TRANSACTION_PORT}:${MICROSERVICE_TRANSACTION_PORT}
      environment:
        - MYSQL_HOST=${MYSQL_HOST}
        - MYSQL_USER=${MYSQL_USER}
        - MYSQL_PASSWORD=${MYSQL_PASSWORD}
        - MYSQL_DATABASE=${MYSQL_DATABASE}
        - MYSQL_PORT=${MYSQL_PORT}
        - KAFKA_NAME=${KAFKA_NAME}
        - KAFKA_HOST=${KAFKA_HOST}
        - KAFKA_CONSUMER_GROUP_ID=${KAFKA_CONSUMER_GROUP_ID}
        - KAFKA_TOPIC_TRANSACTION_CREATED=${KAFKA_TOPIC_TRANSACTION_CREATED}
        - KAFKA_TOPIC_TRANSACTION_VERIFIED=${KAFKA_TOPIC_TRANSACTION_VERIFIED}
        - MICROSERVICE_TRANSACTION_PORT=${MICROSERVICE_TRANSACTION_PORT}
        - KAFKA_CONSUMER_GROUP_ID_ANTI_FRAUD_VERIFIED=${KAFKA_CONSUMER_GROUP_ID_ANTI_FRAUD_VERIFIED}
      volumes:
        - ./microservice-transaction:/app
        - /app/node_modules

  microservice-anti-fraud:
      container_name: microservice-anti-fraud
      depends_on:
        - mysql-db
      build: ./microservice-anti-fraud
      restart: unless-stopped
      ports:
        - ${MICROSERVICE_ANTI_FRAUD_PORT}:${MICROSERVICE_ANTI_FRAUD_PORT}
      environment:
        - MYSQL_HOST=${MYSQL_HOST}
        - MYSQL_USER=${MYSQL_USER}
        - MYSQL_PASSWORD=${MYSQL_PASSWORD}
        - MYSQL_DATABASE=${MYSQL_DATABASE}
        - MYSQL_PORT=${MYSQL_PORT}
        - KAFKA_NAME=${KAFKA_NAME}
        - KAFKA_HOST=${KAFKA_HOST}
        - KAFKA_CONSUMER_GROUP_ID=${KAFKA_CONSUMER_GROUP_ID}
        - KAFKA_TOPIC_TRANSACTION_CREATED=${KAFKA_TOPIC_TRANSACTION_CREATED}
        - KAFKA_TOPIC_TRANSACTION_VERIFIED=${KAFKA_TOPIC_TRANSACTION_VERIFIED}
        - MICROSERVICE_ANTI_FRAUD_PORT=${MICROSERVICE_ANTI_FRAUD_PORT}
        - KAFKA_CONSUMER_GROUP_ID_ANTI_FRAUD=${KAFKA_CONSUMER_GROUP_ID_ANTI_FRAUD}
      stdin_open: true
      tty: true
      volumes:
        - ./microservice-anti-fraud:/app
        - /app/node_modules